
//////////////////////////////////////////////////////////
////6.1.9.1
//////////////////////////////////////////////////////////

object TestMe1 {

  def main(args: Array[String]): Unit = {

    val list1 = List()
    val list2 = List(4,5,6)

    val k1 = list2.length
    val k2 = list2.size

    val k3 = list1.headOption  //head would throw error here
    val k4 = list2.head

    val k5 = list2.mkString

    val k6 = list2.headOption.isDefined

  }
}

//////////////////////////////////////////////////////////
////6.1.9.2
//////////////////////////////////////////////////////////

object TestMe2 {

  def main(args: Array[String]): Unit = {
  val animals = Seq("Cat","Dog","Penguin")
  val animals2 =  "Mouse" +: animals :+ "Tyran"
  val animals3 =  2 +: "Mouse" +: animals :+ "Tyran"
  }
}

//////////////////////////////////////////////////////////
////6.1.9.3
//////////////////////////////////////////////////////////

case class Film(
                 name: String,
                 yearOfRelease: Int,
                 imdbRating: Double)
case class Director(
                     firstName: String,
                     lastName: String,
                     yearOfBirth: Int,
                     films: Seq[Film])

object TestMe3 {

  def main(args: Array[String]): Unit = {

    val memento = new Film("Memento", 2000, 8.5)
    val darkKnight = new Film("Dark Knight", 2008, 9.0)
    val inception = new Film("Inception", 2010, 8.8)
    val highPlainsDrifter = new Film("High Plains Drifter", 1973, 7.7)
    val outlawJoseyWales = new Film("The Outlaw Josey Wales", 1976, 7.9)
    val unforgiven = new Film("Unforgiven", 1992, 8.3)
    val granTorino = new Film("Gran Torino", 2008, 8.2)
    val invictus = new Film("Invictus", 2009, 7.4)
    val predator = new Film("Predator", 1987, 7.9)
    val dieHard = new Film("Die Hard", 1988, 8.3)
    val huntForRedOctober = new Film("The Hunt for Red October", 1990, 7.6)
    val thomasCrownAffair = new Film("The Thomas Crown Affair", 1999, 6.8)
    val eastwood = new Director("Clint", "Eastwood", 1930,
      Seq(highPlainsDrifter, outlawJoseyWales, unforgiven, granTorino, invictus))
    val mcTiernan = new Director("John", "McTiernan", 1951,
      Seq(predator, dieHard, huntForRedOctober, thomasCrownAffair))
    val nolan = new Director("Christopher", "Nolan", 1970,
      Seq(memento, darkKnight, inception))
    val someGuy = new Director("Just", "Some Guy", 1990,
      Seq())
    val directors = Seq(eastwood, mcTiernan, nolan, someGuy)

    def FindDirs(numberOfFilms: Int): Seq[Director] = {
      directors.filter(x => x.films.size > numberOfFilms)
    }

    def BornBefore(year: Int): Option[Director] = {
      directors.find(x => x.yearOfBirth < year)
    }

    def BornBeforeAndDirected(numberOfFilms: Int, year: Int): Option[Director] = {
      directors.find(x => x.yearOfBirth < year && x.films.size > numberOfFilms)
    }

    def Sorted(ascending: Boolean = true): Seq[Director] = {
      if (ascending) directors.sortWith(_.yearOfBirth < _.yearOfBirth) else directors.sortWith(_.yearOfBirth > _.yearOfBirth)
    }

    val k = List(List(1, 2), List(3, 4))
    Seq(1, 2, 3).flatMap(num => Seq(num, num * 10)) //returns List(1,10,2,20,3,30)

    ///////////////////////////
    ///////////////////////////
    // SUB-SECTION 6.3.1
    //These answers correspond to section 6.3.1 which use the same setup as above.
    ///////////////////////////
    ///////////////////////////


    for {item <- nolan.films} println(item.name)

    for {
      dir <- directors
      film <- dir.films
    } println(dir.lastName + ":" + film.name)

    val sorted = (for {
      dir <- directors
      film <- dir.films
    } yield film).sortWith(_.imdbRating > _.imdbRating)

    for {
      dir <- directors
      film <- dir.films
    } println(s"Tonight Only: ${film.name} by ${dir.lastName}")


}
}


//////////////////////////////////////////////////////////
////6.2.7.1
//////////////////////////////////////////////////////////

//Didn't have a problem with this one the first time through, so no redoing here.
//See Classwork_Chp6.scala for my earlier work on this one.


//////////////////////////////////////////////////////////
////6.2.7.2
//////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////
/// Issues/Questions on this group
//////////////////////////////////////////////////////////
//  1. I still feel like I'm missing my ah-ha moment on flatMap.
//     Though I'm able to use it, I think i'm missing some underlying fundamental.
//     I understand it very basically as iterating over a Seq, starting with an initial value, and adding that via an accumulator and a function against each value.
//     In the second class, you described it to me at a higher level and I'm ready to have that discussion again (wasn't at a point back then when I didn't have enough context to really absorb what you were saying).
//     Here's a specific: in Example below, the first some seems to iterate through each List while the second one seems to iterate through each element of the list.
//  2. I wasn't able to get anywhere with Unique but I understood the example once I read it.
//  3. After that, I was able to do all the rest of them, which I was actually pretty proud of.
//     Well - with the disclaimer that I did them all assuming Int and not Type Params.
//     I'll go back and do them with type params once we talk through FlatMap more.
//  4. Placeholder syntax - sometimes it's very clear to me and sometimes not.
//     The use of it in unique confuses me. Don't you have both a value and an accumulator?
//////////////////////////////////////////////////////////


object Example {
  List(List(1, 2),List(3,4)).flatMap(x=>x.map(_*2)) //returns List(2,4,6,8)
  Seq(1, 2, 3).flatMap(num => Seq(num, num * 10))   //returns List(1,10,2,20,3,30)
}


object TestMe4 {

  def min(mySeq: Seq[Int]): Int = {
    mySeq.foldLeft(mySeq.head)((acc: Int, value: Int) => if(value < acc) value else acc)
  }

  def insert(seq: Seq[Int], elt: Int): Seq[Int] = {
    if(seq.contains(elt))
      seq
    else
      elt +: seq
  }
  def unique(seq: Seq[Int]): Seq[Int] = {
    seq.foldLeft(Seq.empty[Int]){ insert _ }
  }

  def reverse(mySeq: Seq[Int]): Seq[Int] = {
    mySeq.foldLeft(Seq.empty[Int]){ (acc: Seq[Int], value: Int) => acc.+:(value) }
 }

  def myMap(mySeq: Seq[Int], func: Int => Int): Seq[Int] = {
    val z = func(5)
    mySeq.foldLeft(Seq.empty[Int]){ (acc: Seq[Int], value: Int) => acc.:+(func(value)) }
  }

  def myFoldLeft(mySeq: Seq[Int], initial: Int, func: Int => Int): Int = {
    var value = initial
    mySeq.foreach(num => value = value + func(num))
    value
  }

  def main(args: Array[String]): Unit = {
    val k = Seq(5,6,4,7,1,9,6,1,4)
    val k2 = min(k)
    val k3 = unique(k)
    val k4 = reverse(k)
    val k5 = myMap(k, _ * 2)
    val k6 = myMap(k, _ + 2)
    val k7 = myFoldLeft(k, 0,  _ * 2)
    val k8 = myFoldLeft(k, 0,  _ + 2)

  }
}

//////////////////////////////////////////////////////////
////6.3.1
//////////////////////////////////////////////////////////

//See section tagged SUB-SECTION 6.3.1
//Put this above since it uses the same setup as the earlier question set.


//////////////////////////////////////////////////////////
////6.5.1.1
//////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////
/// Issues/Questions on this group
//////////////////////////////////////////////////////////
//COMMENT:
// I LOVE that, after having used Option for years, that when I read this next statement, I knew what that meant under the hood now!!
//Option is a generic sealed trait with two subtypes: Some and None.
//Questions:
//1. I see what is happening here but why would you ever use a loop when you're operating on two values (as opposed to a collection)?
//   Am I not thinking about a For Comp properly?  I'm surprised you can even do ( x1 <- x) when x is not a collection.
//2. On addOptionB, I was able to get close without look but couldn't get the right combination of map/flatmap.  Again - need my ah-ha moment with flatMap.
//////////////////////////////////////////////////////////


object TestMe5 {
  def main(args: Array[String]): Unit = {

    def addOptionsA(x: Option[Int], y: Option[Int]): Option[Int] ={
      for {
        x1 <- x
        y1 <- y
      } yield x1 + y1
    }

    def addOptionsB(x: Option[Int], y: Option[Int]): Option[Int] ={
      x.flatMap(a=> y.map(b => a + b))
    }

    val k1 = addOptionsA(Some(100), Some(200))
    val k2 = addOptionsB(Some(100), Some(200))

  }
}


//////////////////////////////////////////////////////////
////6.5.1.2
//////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////
/// Issues/Questions on this group
/// 1. I was able to do these by repeating the pattern but still don't understand deeply enough.
//////////////////////////////////////////////////////////


object TestMe6 {
  def main(args: Array[String]): Unit = {

    def addOptionsA(x: Option[Int], y: Option[Int], z: Option[Int]): Option[Int] ={
      for {
        x1 <- x
        y1 <- y
        z1 <- z
      } yield x1 + y1 + z1
    }

    def addOptionsB(x: Option[Int], y: Option[Int], z: Option[Int]): Option[Int] ={
      x.flatMap(a=> y.flatMap(b=> z.map(c=>a + b + c)))
    }

    val k1 = addOptionsA(Some(100), Some(200), Some(300))
    val k2 = addOptionsB(Some(100), Some(200), Some(300))

  }
}

//////////////////////////////////////////////////////////
////6.5.1.3
//////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////
/// Issues/Questions on this group
//  1. Ok - I'm missing something on the For Comprehensions then.
//     I tried to do it by putting the Divide after the Yield.
//     But that doesn't compile - why??
//////////////////////////////////////////////////////////


object TestMe7 {
  def main(args: Array[String]): Unit = {

    def divide(x: Int, y: Int): Option[Int] ={
      if(y==0) None else Some(x/y)
    }

    def divideOptions(x: Option[Int], y: Option[Int]): Option[Int] ={
      for {
        a <- x
        b <- y
        c <- divide(a, b)
      } yield c //divide(a, b)
    }

  }
}

//////////////////////////////////////////////////////////
////6.5.1.4
//////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
////// So below is what I came up with before looking at the answer.
////// I need help getting past the idea that For Comps are only for looping over collections.
////// Beyond that though, I also don't get how your code works,
////// first off, I can't get it to comple and second, why doesn't my val test = .... work below?
//////////////////////////////////////////////////////////////////////////

object TestMe8 {
  def main(args: Array[String]): Unit = {

    def readInt(str: String): Option[Int] = {
      if (str matches "\\d+") Some(str.toInt) else None
    }

    def calculator(operand1: String, operator: String, operand2: String): Unit = {
      val op1 = readInt(operand1)
      val op2 = readInt(operand2)
      //val test = Some(op1 + op2)
      val res =
        operator match {
          case "+" => if (op1.isDefined && op2.isDefined) println(op1.get + op2.get) else println("Error")
          case "-" => if (op1.isDefined && op2.isDefined) println(op1.get - op2.get) else println("Error")
          case "*" => if (op1.isDefined && op2.isDefined) println(op1.get * op2.get) else println("Error")
          case "/" => if (op1.isDefined && op2.isDefined && op2.get != 0) println(op1.get / op2.get) else println("Error")
        }
      println(res)
    }

    //    def calculator2(operand1: String, operator: String, operand2: String): Unit = {
    //      val result = for {
    //        a <- readInt(operand1)
    //        b <- readInt(operand2)
    //        ans <- operator match {
    //          case "+" => Some(a + b)
    //          case "-" => Some(a - b)
    //          case "*" => Some(a * b)
    //          case _ => None
    //        }
    //      } yield ans
    //
    //      ans match {
    //        case Some(number) => println(s"The answer is $number!")
    //        case None => println(s"Error calculating $operand1 $operator $operand2")
    //      }
    //    }

    calculator("10", "/", "2")


    val z = 1
  }
}

  //////////////////////////////////////////////////////////
  ////6.8.3.1
  //////////////////////////////////////////////////////////

////////////////////////////////////////////////////
// Did fine here until the last problem - ages.
////////////////////////////////////////////////////


  object TestMe9 {
    def main(args: Array[String]): Unit = {

      val people = Set(
        "Alice",
        "Bob",
        "Charlie",
        "Derek",
        "Edith",
        "Fred")
      val ages = Map(
        "Alice" -> 20,
        "Bob" -> 30,
        "Charlie" -> 50,
        "Derek" -> 40,
        "Edith" -> 10,
        "Fred" -> 60)
      val favoriteColors = Map(
        "Bob" -> "green",
        "Derek" -> "magenta",
        "Fred" -> "yellow")
      val favoriteLolcats = Map(
        "Alice" -> "Long Cat",
        "Charlie" -> "Ceiling Cat",
        "Edith" -> "Cloud Cat")


      def faveColor(name: String): String = {
        val color = favoriteColors.get(name)
        if(color.isDefined) color.get else "beige"
      }

      def printColors(): Unit = {
        for {
          p <- people
        } println(p + ": " + faveColor(p))
      }

      def lookup[A](name: String, someMap: Map[String,A]): A = {
        someMap(name)
      }


      println(faveColor("Derek"))
      println(faveColor("DerekII"))
      printColors()
      println(lookup("Bob", favoriteColors))
      println(lookup("Bob", ages))


    }
  }


//////////////////////////////////////////////////////////
////6.8.4.1
//////////////////////////////////////////////////////////


object TestMe10 {
  def main(args: Array[String]): Unit = {

    def union[A](a: Set[A], b: Set[A]): Set[A] = {
      b.foldLeft(a)((m: Set[A], n: A) => m + n)
    }

    val a = Set(1,2,3,4)
    val b = Set(4,5,6)

    println(union(a,b))



  }
}


//////////////////////////////////////////////////////////
////6.8.4.2
//////////////////////////////////////////////////////////

//I got close here but couldn't quite get it right


object TestMe11 {
  def main(args: Array[String]): Unit = {

    def union[A](a: Map[A,Int], b: Map[A,Int]): Any = {
      a.map(x=> Map(x._1 -> (x._2 + b(x._1))))
    }

    val a = Map('a' -> 1, 'b' -> 2)
    val b = Map('a' -> 2, 'b' -> 4)

    println(union(a,b))


 }
}


//////////////////////////////////////////////////////////
////6.8.4.2
//////////////////////////////////////////////////////////

object TestMe12 {
  def main(args: Array[String]): Unit = {

    val subjects = List("Noel", "The cat", "The dog")
    val verbs = List("wrote", "chased", "slept on")
    val objects= List("the book", "the ball", "the bed")

    val all = for {
      a <- subjects
      b <- verbs
      c <- objects
    } yield a + " " + b + " " + c

    //println(all)

    def getVerbs(subject: String): List[String] = {
      subject match {
        case "Noel" => List("wrote","chased","slept on")
        case "The cat" => List("meowed at","chased","slept on")
        case "The dog" => List("barked at","chased","slept on")
      }
    }

    def getObjects(verb: String): List[String] = {
      verb match {
      case "wrote" => List("the book", "the letter", "the code")
      case "chased" => List("the ball", "the dog", "the cat")
      case "slept on" => List("the bed", "the mat", "the train")
      case "meowed at" => List("Noel", "the door", "the food cupboard")
      case "barked at" => List("the postman", "the car", "the cat")
      }
    }


    val all2 = for {
      a <- subjects
      b <- getVerbs(a)
      c <- getObjects(b)
    } yield a + " " + b + " " + c

    println(all2)


  }
}
