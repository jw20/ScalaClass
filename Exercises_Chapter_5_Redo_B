///////////////////////////////////////////////////////
//5.3.2.1
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
//STATUS:  I find that I generally understand each concept in isolation (or at least I think I do).
//         For example, I get the use of ADT, Structural Recursion, Type Parameters and Anonymous Functions in isolation.
//         It's when I try to put them altogether that I get lost/confused.
//         I think maybe I could use more practice with the individual pieces first - what do you think?
//         Are there other exercises you might have or on the web that could be helpful?
//         More than anything else, I think it's whatever the concept is + using it with recursion that does me in.
//
//         Specifically on this exercise below, if I slowly work through it, I can see how fold[Int] works,
//         though I wouldn't say I totally get it.  Then, when fold[A] is introduced, I get even more lost.
//         Again, looking at the answer, I can see how it works but I could not have come up with the solution on my own.
////////////////////////////////////////////////////////



sealed trait IntList {

  //  def length: Int =
  //    this match {
  //      case End => 0
  //      case Pair(hd, tl) => 1 + tl.length
  //    }
//  def double: IntList =
//    this match {
//      case End => End
//      case Pair(hd, tl) => Pair(hd * 2, tl.double)
//    }
  def double: IntList = {
    fold(End, (x:Int, y:IntList)=> Pair(x*2,y))
     // case Pair(hd, tl) => Pair(hd * 2, tl.double)
  }

  //  def product: Int =
  //    this match {
  //      case End => 1
  //      case Pair(hd, tl) => hd * tl.product
  //    }
  //  def sum: Int =
  //    this match {
  //      case End => 0
  //      case Pair(hd, tl) => hd + tl.sum
  //    }
  def length: Int = {
    fold(0, (x:Int, y:Int)=> 1+y)
  }
  def sum: Int = {
    fold(0, (x:Int, y:Int)=> x+y)
  }
  def product: Int = {
    fold(1, (x: Int, y: Int) => x * y )
  }

  def fold[A](end: A, func: (Int,A) => A): A =
    this match {
      case End=> end
      case Pair(hd, tl) => func(hd, tl.fold(end,func))
    }
}
final case class Pair(head: Int, tail: IntList) extends IntList
final case object End extends IntList

object TestMe1 {
  def main(args: Array[String]): Unit = {
    val example = Pair(1, Pair(2, Pair(3, End)))

    assert(example.length == 3)
    assert(example.tail.length == 2)
    assert(End.length == 0)

    assert(example.sum == 6)

    assert(example.product == 6)
    assert(example.tail.product == 6)
    assert(End.product == 1)

    assert(example.double == Pair(2, Pair(4, Pair(6, End))))

  }
}

