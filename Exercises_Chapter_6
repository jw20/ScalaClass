
//////////////////////////////////////////////////////////
////6.1.9.1
//////////////////////////////////////////////////////////

object TestMe1 {

  def main(args: Array[String]): Unit = {

    val list1 = List()
    val list2 = List(4,5,6)

    val k1 = list2.length
    val k2 = list2.size

    val k3 = list1.headOption  //head would throw error here
    val k4 = list2.head

    val k5 = list2.mkString

    val k6 = list2.headOption.isDefined

  }
}

//////////////////////////////////////////////////////////
////6.1.9.2
//////////////////////////////////////////////////////////

object TestMe2 {

  def main(args: Array[String]): Unit = {


    val animals = Seq("cat", "dog","penguin")
    val k1 =  "mouse" +: animals :+ "tyrannosaurus"
    //The type of animals will change from String to Any
    val k2 = 2 +: animals

  }
}

//////////////////////////////////////////////////////////
////6.1.9.3
//////////////////////////////////////////////////////////

object TestMe3 {

  def main(args: Array[String]): Unit = {


    case class Film(name: String, yearOfRelease: Int, imdbRating: Double)
    case class Director(firstName: String, lastName: String, yearOfBirth: Int, films: Seq[Film])

    val memento = new Film("Memento", 2000, 8.5)
    val darkKnight = new Film("Dark Knight", 2008, 9.0)
    val inception = new Film("Inception", 2010, 8.8)
    val highPlainsDrifter = new Film("High Plains Drifter", 1973, 7.7)
    val outlawJoseyWales = new Film("The Outlaw Josey Wales", 1976, 7.9)
    val unforgiven = new Film("Unforgiven", 1992, 8.3)
    val granTorino = new Film("Gran Torino", 2008, 8.2)
    val invictus = new Film("Invictus", 2009, 7.4)
    val predator = new Film("Predator", 1987, 7.9)
    val dieHard = new Film("Die Hard", 1988, 8.3)
    val huntForRedOctober = new Film("The Hunt for Red October", 1990, 7.6)
    val thomasCrownAffair = new Film("The Thomas Crown Affair", 1999, 6.8)

    val eastwood = new Director("Clint", "Eastwood", 1930, Seq(highPlainsDrifter, outlawJoseyWales, unforgiven, granTorino, invictus))
    val mcTiernan = new Director("John", "McTiernan", 1951, Seq(predator, dieHard, huntForRedOctober, thomasCrownAffair))
    val nolan = new Director("Christopher", "Nolan", 1970, Seq(memento, darkKnight, inception))
    val someGuy = new Director("Just", "Some Guy", 1990, Seq())
    val directors = Seq(eastwood, mcTiernan, nolan, someGuy)

    def directedMoreThan(numberOfFilms: Int): Seq[Director] = {
      directors.filter(x=>x.films.size > numberOfFilms)
    }

    def bornBefore(year: Int): Seq[Director] = {
      directors.filter(x=> x.yearOfBirth < year)
    }

    def firstBornBefore(year: Int): Option[Director] = {
      bornBefore(year).headOption
    }

    def bornBeforeAndDirectedMoreThan(numberOfFilms: Int, year: Int): Seq[Director] = {
      val bb = bornBefore(year)
      val dmt = directedMoreThan(numberOfFilms)
      (bb ++ dmt).distinct
    }

    def sortedDirectors(ascending: Boolean = true): Seq[Director] = {
      if(ascending) directors.sortBy(- _.yearOfBirth) else directors.sortBy(_.yearOfBirth)
    }

    val k1 = directedMoreThan(2)
    val k2 = directedMoreThan(3)

    val zzz = bornBefore(1960)

    val k3 = firstBornBefore(1970)
    val k4 = firstBornBefore(1900)

    val k5 = bornBeforeAndDirectedMoreThan(3, 1940)

    val k6 = sortedDirectors()
    val k7 = sortedDirectors(false)


    //////////////////////////////////////////////////////////
    ////6.2.7.1
    //////////////////////////////////////////////////////////

    val k8 = nolan.films.map(x => x.name)
    val k9 = directors.flatMap(_.films).map(_.name)
    val k10 = mcTiernan.films.foldLeft(mcTiernan.films.head.yearOfRelease)((m: Int, n: Film) => if(m<n.yearOfRelease) m else n.yearOfRelease)
    val k11 = mcTiernan.films.foldLeft(mcTiernan.films.head.yearOfRelease)((m: Int, n: Film) => math.min(m,n.yearOfRelease))
    val k12 = directors.flatMap(_.films).sortWith(_.imdbRating > _.imdbRating)
    val k13 = directors.flatMap(_.films).foldLeft(0.0)((m:Double, n:Film) => m+n.imdbRating) /  directors.flatMap(_.films).size
    val k14 = directors.foreach(f => {
      f.films.foreach(x => {
        println("Tonight Only! " + x.name + " by " +  f.firstName + "!")
      })
    })
    val k15 = directors.flatMap(_.films).foldLeft(directors.flatMap(_.films).head)((m: Film, n: Film) => if(m.yearOfRelease<n.yearOfRelease) m else n)

    //////////////////////////////////////////////////////////
    ////6.2.7.2
    //////////////////////////////////////////////////////////

    val mySeq = Seq(1,2,6,-5,8)
    val k16 = mySeq.foldLeft(mySeq.head)(math.min(_ ,_))

    val myNewSeq = Seq(1, 1, 2, 4, 3, 4)
    //val k17 = myNewSeq.map(x=>if(x.contains))

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //GOT STOPPED HERE - Couldn't figure out unique on my own and don't fully understand the answer provided in the book.
    /////////////////////////////////////////////////////////////////////////////////////////////////////


  }
}
 
