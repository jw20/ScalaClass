
trait Visitor {
  def id: String // Unique id assigned to each user
  def createdAt: Date // Date this user first visited the site
  // How long has this visitor been around?
  def age: Long = new Date().getTime - createdAt.getTime
}

case class Anonymous(id: String, createdAt: Date = new Date()) extends Visitor
case class User(id: String, email: String, createdAt: Date) extends Visitor

object Runner {
  def older(v1: Visitor, v2: Visitor): Boolean = v1.createdAt.before(v2.createdAt)
}

object TestMe1 extends Script {
  val k = Runner.older(User("1","user@x.com",new Date()), Anonymous("2"))
}

////////////////////////////////////////////////////////
//4.1.4.1
////////////////////////////////////////////////////////

trait Feline {
  def color: String
  def sound:String
}

case class Cat (color: String, sound: String = "Meow", food: String) extends Feline
case class Tiger (color: String, sound: String = "Roar") extends Feline
case class Lion (color: String, sound: String = "Roar", maneSize: Int) extends Feline
case class Panther (color: String, sound: String = "Roar") extends Feline

object TestMe2 extends Script {
  val c = Cat("Red", food ="Chow")
  val t = Tiger("Red")
  val l = Lion("Red", maneSize =1)
  val p = Panther("Red")
}

//After reading the solution, I see I shouldn't have included sound in the constructor since
//that enables the user to change it which doesn't make sense. Got it.

////////////////////////////////////////////////////////
//4.1.4.2
////////////////////////////////////////////////////////

trait Shape {
  def sides: Int
  def perimeter: Double
  def area: Double
}

case class Circle(radius: Double) extends Shape {
  val sides = 1
  val perimeter = 2 * math.Pi * radius
  val area = math.Pi * math.pow(radius, 2)
}

case class Rectangle(length: Double, width: Double) extends Shape {
  val sides = 4
  val perimeter = length*2 + width*2
  val area = length * width
}

case class Square(width: Double) extends Shape {
  val sides = 4
  val perimeter = width * 4
  val area = width * width
}

object TestMe3 extends Script{
  val c = Circle(3)
  val r = Rectangle(2,3)
  val s = Square(4)
}


////////////////////////////////////////////////////////
//4.1.4.3
////////////////////////////////////////////////////////

trait Shape2 {
  def sides: Int
  def perimeter: Double
  def area: Double
}

trait Rectangular extends Shape2 {
  def sides: Int = 4
  def length: Double
  def width: Double
  def perimeter: Double = 2*length + 2*width
  def area: Double = length * width
}

case class Circle2(radius: Int) extends Shape2 {
  val sides = 1
  val perimeter = 2 * math.Pi * radius
  val area = math.Pi * math.pow(radius, 2)
}

case class Rectangle2(length: Double, width: Double) extends Rectangular {
}

case class Square2(width: Double) extends Rectangular {
  val length: Double = width
}

object TestMe4 extends Script{
  val c = Circle2(3)
  val r = Rectangle2(2,3)
  val r1 = r.perimeter
  val r2 = r.area
  val s = Square2(4)
  val s1 = s.perimeter
  val s2 = s.area
}

////////////////////////////////////////////////////////
//4.2.2.1
////////////////////////////////////////////////////////

sealed trait Shape3 {
  def sides: Int
  def perimeter: Double
  def area: Double
}

sealed trait Rectangular3 extends Shape3 {
  def sides: Int = 4
  def length: Double
  def width: Double
  def perimeter: Double = 2*length + 2*width
  def area: Double = length * width
}

final case class Circle3(radius: Int) extends Shape3 {
  val sides = 1
  val perimeter = 2 * math.Pi * radius
  val area = math.Pi * math.pow(radius, 2)
}

final case class Rectangle3(length: Double, width: Double) extends Rectangular3 {
}

final case class Square3(width: Double) extends Rectangular3 {
  val length: Double = width
}

object Draw {
  def apply(myShape: Shape3): String = {
    myShape match {
      case Circle3(r) => "A circle of radius " + r
      case Rectangle3(l,w) => "A rectangle of length " + l + " and width of " + w
      case Square3(w) => "A square of width " + w
    }
  }
}

object TestMe5 extends Script {
  val c = Draw(Circle3(5))
  val r = Draw(Rectangle3(5,2))
  val s = Draw(Square3(5))
}

////////////////////////////////////////////////////////
//4.2.2.2
////////////////////////////////////////////////////////

sealed trait Color4 {
  def r: Int
  def g: Int
  def b: Int
  def name: String
  def shade: String
}

object Red extends Color4 {
  val r = 100
  val g = 200
  val b = 300
  val shade = "Dark"
  val name = "Red"
}

object Pink extends Color4 {
  val r = 50
  val g = 200
  val b = 300
  val shade = "Light"
  val name = "Pink"
}

object Yellow extends Color4 {
  val r = 50
  val g = 200
  val b = 200
  val shade = "Light"
  val name = "Yellow"
}

sealed trait Shape4 {
  def sides: Int
  def perimeter: Double
  def area: Double
  def color: Color4
}

sealed trait Rectangular4 extends Shape4 {
  def sides: Int = 4
  def length: Double
  def width: Double
  def perimeter: Double = 2*length + 2*width
  def area: Double = length * width
}

final case class Circle4(radius: Int, color: Color4) extends Shape4 {
  val sides = 1
  val perimeter = 2 * math.Pi * radius
  val area = math.Pi * math.pow(radius, 2)
}

final case class Rectangle4(length: Double, width: Double, color:Color4) extends Rectangular4 {
}

final case class Square4(width: Double, color:Color4) extends Rectangular4 {
  val length: Double = width
}

object Draw4 {
  def apply(myShape: Shape4): String = {
    myShape match {
      case Circle4(r,c) => "A " + c.shade + c.name + " circle of radius " + r
      case Rectangle4(l,w,c) => "A " + c.shade + c.name + " rectangle of length " + l + " and width of " + w
      case Square4(w,c) => "A " + c.shade + c.name + " square of width " + w
    }
  }
}

object TestMe6 extends Script {
  val c = Draw4(Circle4(5,Red))
  val r = Draw4(Rectangle4(5,2,Pink))

  object Blue extends Color4 {
    val r = 50
    val g = 50
    val b = 300
    val shade = "Dark"
    val name = "Blue"
  }

  val s = Draw4(Square4(5,Blue))

}

////////////////////////////////////////////////////////
//4.2.2.3
////////////////////////////////////////////////////////

sealed trait DivisionResult {}

final case class Finite(res: Double) extends DivisionResult{}

final object Infinite extends DivisionResult{}

object Divide {
  def apply(val1: Int, val2: Int): DivisionResult ={
    if(val2==0) Infinite else Finite(val1/val2)
  }
}

object TestDivide {
  def apply(val1: Int, val2: Int):String ={
    val res = Divide(val1,val2)
    res match {
      case Infinite => "Division by 0 Encountered"
      case Finite(r) => "Normal Division Encountered. Result: " + r
    }
  }
}

object TestMe7 extends Script {
  val k1 = TestDivide(1,0)
  val k2 = TestDivide(10,4)
}

////////////////////////////////////////////////////////
//4.4.4.1
////////////////////////////////////////////////////////

sealed trait TrafficLight
final case class Red() extends TrafficLight
final case class Yellow() extends TrafficLight
final case class Green() extends TrafficLight

////////////////////////////////////////////////////////
//4.4.4.2
////////////////////////////////////////////////////////

sealed trait Calc
final case class Success(value: Double) extends Calc
final case class Failure(value: String) extends Calc

object DoCalc {
    def apply(denom: Int): Calc= {
      if(denom==0) Failure("Didn't Work") else Success(3/denom)
      }
}

object TestMe8 extends  Script {
  val k = DoCalc(1)
  val x = DoCalc(0)
  val y = 1

}

////////////////////////////////////////////////////////
//4.4.4.3
////////////////////////////////////////////////////////

sealed trait Source
final case class Well() extends Source
final case class Spring() extends Source
final case class Tap() extends Source

sealed trait BottledWater {
  def size: Int
  def soure: Source
  def carbonated: Boolean
}

////////////////////////////////////////////////////////
//4.5.6.1
////////////////////////////////////////////////////////

sealed trait TrafficLight2 {
  def next: TrafficLight2
}
final case class Red2() extends TrafficLight2{def next: TrafficLight2 = Green2()}
final case class Yellow2() extends TrafficLight2{def next: TrafficLight2 = Red2()}
final case class Green2() extends TrafficLight2{def next: TrafficLight2 = Yellow2()}

object TestMe9 extends Script{
  val z = Red2().next
  val y = Green2().next
}

////////////////////////////////////////////////////////

sealed trait TrafficLight3 {
  def next: TrafficLight3 =
  this match {
    case Green3()=>Yellow3()
    case Yellow3()=>Red3()
    case Red3()=>Green3()
  }
}
final case class Red3() extends TrafficLight3
final case class Yellow3() extends TrafficLight3
final case class Green3() extends TrafficLight3

object TestMe10 extends Script {
  val z = Red3().next
  val y = Green3().next
}
  ////////////////////////////////////////////////////////

  sealed trait TrafficLight4
  final case class Red4() extends TrafficLight4
  final case class Yellow4() extends TrafficLight4
  final case class Green4() extends TrafficLight4

  object Next {
    def apply(curr: TrafficLight4): TrafficLight4 = {
      curr match {
        case Green4() => Yellow4()
        case Yellow4() => Red4()
        case Red4() => Green4()
      }
    }
  }

  object TestMe11 extends Script {
    val z = Next(Red4())
    val y = Next(Green4())
}

////////////////////////////////////////////////////////
//4.5.6.2
////////////////////////////////////////////////////////

sealed trait Calculation2
final case class Success2(result: Int) extends Calculation2
final case class Failure2(reason: String) extends Calculation2

object Calculator2 {
  def +(c: Calculation2, i: Int): Calculation2 = {
    c match {
      case Success2(x) => Success2(x + i)
      case Failure2(x) => c
    }
}
  def -(c: Calculation2, i: Int): Calculation2 = {
    c match {
      case Success2(x) => Success2(x - i)
      case Failure2(x) => c
    }
  }

  def /(c: Calculation2, i: Int): Calculation2 = {
    c match {
      case Success2(x) => if(i==0) Failure2("Division by zero") else Success2(x / i)
      case Failure2(x) => c
    }
  }

}

object TestMe12 extends Script {
  assert(Calculator2.+(Success2(1), 1) == Success2(2))
  assert(Calculator2.-(Success2(1), 1) == Success2(0))
  assert(Calculator2.+(Failure2("Badness"), 1) == Failure2("Badness"))

  assert(Calculator2./(Success2(4), 2) == Success2(2))
  assert(Calculator2./(Success2(4), 0) == Failure2("Division by zero"))
  assert(Calculator2./(Failure2("Badness"), 0) == Failure2("Badness"))
}

////////////////////////////////////////////////////////
//4.5.6.3
////////////////////////////////////////////////////////

//Pattern matching in an EmailService Object b/c it will require a lot of external code
//to handle the email that doesn't belong in Visitor objects themsevles.

////////////////////////////////////////////////////////
//4.6.3.1 - Just replicate example from book
////////////////////////////////////////////////////////

sealed trait IntList
final case class Pair(head: Int, tail: IntList) extends IntList
final case object End extends IntList

object sum {
  def apply(list: IntList): Int =
    list match {
      case End => 0
      case Pair(hd, tl) => hd + sum(tl)
    }
}

object TestMe13 extends Script {
  val example = Pair(1, Pair(2, Pair(3, End)))
  assert(sum(example) == 6)
  assert(sum(example.tail) == 5)
  assert(sum(End) == 0)
}

////////////////////////////////////////////////////////
//4.6.3.1 - Actual exercise
////////////////////////////////////////////////////////


sealed trait IntListX {
  def length: Int = {
    this match {
      case EndX => 0
      case PairX(h, t) => 1 + t.length
    }
  }
  def product: Int = {
    this match {
      case EndX => 1
      case PairX(h, t) => h * t.product
    }
  }
  def double: IntListX = {
    this match {
      case EndX => this
      case PairX(h, t) => PairX(h*2, t.double)
    }
  }
}
final case class PairX(head: Int, tail: IntListX) extends IntListX
final case object EndX extends IntListX


object TestMe14 extends Script {
  val example = PairX(1, PairX(2, PairX(3, EndX)))
  assert(example.length == 3)
  assert(example.tail.length == 2)
  assert(EndX.length == 0)

  assert(example.product == 6)
  assert(example.tail.product == 6)
  assert(EndX.product == 1)

  val z = example.double

  assert(example.double == PairX(2, PairX(4, PairX(6, EndX))))
  assert(example.tail.double == PairX(4, PairX(6, EndX)))
  assert(EndX.double == EndX)
}


////////////////////////////////////////////////////////
//4.6.3.2 - Actual exercise
////////////////////////////////////////////////////////

sealed trait Tree {
  def sum: Int = {
    this match {
      case Leaf(value) => value
      case Node(l,r) => l.sum + r.sum
    }
  }
  def double: Tree = {
    this match {
      case Leaf(value) => Leaf(value * 2)
      case Node(l,r) => Node(l.double, r.double)
    }
  }
}
final case class Node(left: Tree, right: Tree) extends Tree
final case class Leaf(value: Int) extends Tree

object TestMe15 extends Script{
  val leaf1 = Leaf(10)
  val leaf2 = Leaf(20)
  val leaf3 = Leaf(30)
  val node2 = Node(leaf2, leaf3)
  val node1 = Node(leaf1, node2)

  assert(node1.sum == 60)
  assert(node1.double.sum == 120)
}

////////////////////////////////////////////////////////

sealed trait Tree2 {
  def sum: Int
  def double: Tree2
}
final case class Node2(left: Tree2, right: Tree2) extends Tree2 {
  def sum: Int = {
    left.sum + right.sum
  }
  def double: Tree2 = {
      Node2(left.double, right.double)
  }
}
final case class Leaf2(value: Int) extends Tree2 {
  def sum: Int = {
    value
  }
  def double: Tree2 = {
      Leaf2(value * 2)
    }
}

object TestMe16 extends Script{
  val leaf1 = Leaf2(10)
  val leaf2 = Leaf2(20)
  val leaf3 = Leaf2(30)
  val node2 = Node2(leaf2, leaf3)
  val node1 = Node2(leaf1, node2)

  assert(node1.sum == 60)
  assert(node1.double.sum == 120)
}

////////////////////////////////////////////////////////
//4.7.0.3 - Extended exercises - Calc
////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
//NOTE:
//I was not able to come up with this solution - filled in from the answer key.
//Though I feel like i understand all the pieces (ie traits, pattern matching, structural recursion, etc...),
//I have trouble combining them all into bigger pieces of code like this.
////////////////////////////////////////////////////////


sealed trait Result
final case class Succeed(value: Double) extends Result
final case class Fail(err: String) extends Result

sealed trait Expression {
  def eval: Result = {
    this match {
      case Addition(left, right) => {
        left.eval match {
          case Fail(reason) => Fail(reason)
          case Succeed(leftVal) => {
            right.eval match {
              case Fail(reason) => Fail(reason)
              case Succeed(rightVal) => {
                Succeed(leftVal+rightVal)
              }
            }
          }
        }
      }
      case Subtraction(left, right) => {
        left.eval match {
          case Fail(reason)=>Fail(reason)
          case Succeed(valOne) => {
            right.eval match {
              case Fail(reason) => Fail(reason)
              case Succeed(valTwo) => {
                Succeed(valOne - valTwo)
              }
            }
          }
        }
      }
      case Division(l, r) =>
        l.eval match {
          case Fail(reason) => Fail(reason)
          case Succeed(r1) =>
            r.eval match {
              case Fail(reason) => Fail(reason)
              case Succeed(r2) =>
                if(r2 == 0)
                  Fail("Division by zero")
                else
                  Succeed(r1 / r2)
            }
        }
      case SquareRoot(exp) => {
        exp.eval match {
          case Fail(reason)=>Fail(reason)
          case Succeed(valOne) =>{
            if(valOne < 0) Fail("Square root of negative number") else Succeed(math.sqrt(valOne))
          }
        }
      }
      case Number(value) => Succeed(value)
    }
  }
}
final case class Addition(left: Expression, right: Expression) extends Expression
final case class Subtraction(left: Expression, right: Expression) extends Expression
final case class Division(left: Expression, right: Expression) extends Expression
final case class SquareRoot(value: Expression) extends Expression
final case class Number(value: Double) extends Expression

object TestMe17 extends Script {
  val val1 = Number(2)
  val val2 = Number(5)
  val val3 = Number(4)
  val val4 = Number(-1)

  assert(val1.eval==Succeed(2))
  assert(Addition(val1,val2).eval==Succeed(7))
  assert(Subtraction(val1,val2).eval== Succeed(-3))
  assert(Division(val3, val1).eval==Succeed(2))

  assert(Addition(SquareRoot(Number(-1.0)), Number(2.0)).eval == Fail("Square root of negative number"))
  assert(Addition(SquareRoot(Number(4.0)), Number(2.0)).eval == Succeed(4.0))
  assert(Division(Number(4), Number(0)).eval == Fail("Division by zero"))

}


//
//sealed trait Expression {
//  def eval: Double = {
//    this match {
//      case Addition(left, right) => left.eval + right.eval
//      case Subtraction(left, right) => left.eval - right.eval
//      case Division(left, right) => left.eval / right.eval
//      case SquareRoot(exp) => math.sqrt(exp.eval)
//      case Number(value) => value
//    }
//  }
//}
//final case class Addition(left: Expression, right: Expression) extends Expression
//final case class Subtraction(left: Expression, right: Expression) extends Expression
//final case class Division(left: Expression, right: Expression) extends Expression
//final case class SquareRoot(value: Expression) extends Expression
//final case class Number(value: Double) extends Expression


////////////////////////////////////////////////////////
//4.7.0.4 - Extended exercises - JSON
////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
//NOTE:
//This was as far as I could get on this problem.
//I wound up looking at the answer to see how it was implemented in the end.
////////////////////////////////////////////////////////


sealed trait JVal
final case class JsString(value:String) extends JVal
final case class JsNumber(value:Double) extends JVal
final case class JsBoolean(value:Boolean) extends JVal

sealed trait JList {

  def print: String = {
    val res = printInner
    val resFinal = if(res.takeRight(1) == ",") res.take(res.length-1) else res
    "[" + resFinal + "]"
  }

  def printInner: String = {
    this match {
      case SeqEnd => ""
      case SeqCell(h,t) => {
        h match {
          case JsString(x) => "\"" + x + "\"" + "," + t.printInner
          case JsNumber(x) => x.toString + "," + t.printInner
          case JsBoolean(x) => x.toString + "," + t.printInner
        }
      }
    }
  }
}
final case class SeqCell(head: JVal, tail: JList) extends JList
final case object SeqEnd extends JList


object TestMe {
  def main(args: Array[String]): Unit = {

    val l = SeqEnd.print
    val k = SeqCell(JsString("a string"), SeqCell(JsNumber(1.0), SeqCell(JsBoolean(true), SeqEnd))).print
    // res: String = ["a string", 1.0, true]

    println(l)
    println(k)

  }
}
